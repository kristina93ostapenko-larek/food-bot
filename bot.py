#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
FoodBot ‚Äî —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç ¬´—á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å¬ª
‚Ä¢ aiogram 3.7+ (FSM, inline-–∫–Ω–æ–ø–∫–∏)
‚Ä¢ OpenAI Async SDK (–æ—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å + –∞–≤—Ç–æ-—Ñ–æ–ª–±—ç–∫)
‚Ä¢ –°—Ç—Ä–∏–º —Å –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª—å—é; –ø—Ä–∏ –æ—à–∏–±–∫–µ/–ø—É—Å—Ç–æ–º –æ—Ç–≤–µ—Ç–µ ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ gpt-4o-mini
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: max_completion_tokens (–±–µ–∑ temperature –¥–ª—è –º–æ–¥–µ–ª–µ–π, –≥–¥–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
‚Ä¢ –£—Å—Ç–æ–π—á–∏–≤—ã–π long-poll, —Å–±—Ä–æ—Å webhook, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ /ping, /id
"""

import os
import re
import time
import random
import asyncio
import logging
from typing import List, Dict, Optional, Any, Tuple
from logging.handlers import RotatingFileHandler
from functools import lru_cache
from contextlib import suppress

from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, BaseFilter
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.chat_action import ChatActionSender

# FSM
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage

# ===================== –ö–û–ù–§–ò–ì =====================

class Config:
    MAX_PRODUCTS = 15
    RATE_LIMIT_PER_MIN = 5
    REQUEST_TIMEOUT = 60              # –æ–±—â–∏–π —Å—Ç–æ—Ä–æ–∂ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    MAX_RETRIES = 2                   # —Ä–µ—Ç—Ä–∞–∏ —Å—Ç—Ä–∏–º–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
    CACHE_SIZE = 128

    # –ú–æ–¥–µ–ª–∏
    OPENAI_MODEL = "gpt-4"            # –æ—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å (–µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî —Ñ–æ–ª–±—ç–∫)
    OPENAI_FALLBACK_MODEL = "gpt-3.5-turbo"
    OPENAI_MAX_TOKENS = 1200          # –∏—Å–ø–æ–ª—å–∑—É–µ–º max_completion_tokens

    POLLING_TIMEOUT = 25
    RECONNECT_DELAY = 5
    MAX_RECONNECT_ATTEMPTS = 0        # 0 = –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ

    EDIT_INTERVAL_SEC = 0.6           # —á–∞—Å—Ç–æ—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∏–º–∞

config = Config()

# ================= –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ==================

logger = logging.getLogger("foodbot")
logger.setLevel(logging.INFO)
fmt = logging.Formatter('[%(asctime)s] %(levelname)s - %(message)s', '%Y-%m-%d %H:%M:%S')
file_handler = RotatingFileHandler('foodbot.log', maxBytes=2 * 1024 * 1024, backupCount=3, encoding='utf-8')
file_handler.setFormatter(fmt)
console_handler = logging.StreamHandler()
console_handler.setFormatter(fmt)
logger.addHandler(file_handler)
logger.addHandler(console_handler)

# ================== ENV / OpenAI ==================

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_KEY = os.getenv('OPENAI_API_KEY')
if not TOKEN or not OPENAI_KEY:
    logger.critical("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TELEGRAM_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ .env")
    raise SystemExit(1)

from openai import AsyncOpenAI
from aiohttp import ServerDisconnectedError, ClientOSError
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.exceptions import TelegramNetworkError
oa_client = AsyncOpenAI(api_key=OPENAI_KEY)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π bot —Å–æ–∑–¥–∞–¥–∏–º –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ event loop
bot: Optional[Bot] = None

# ================== FSM ==================

class RecipeFlow(StatesGroup):
    choosing_meal = State()
    entering_ingredients = State()

# ============== –†–µ–π—Ç-–ª–∏–º–∏—Ç ==============

feedback_stats: Dict[str, int] = {"üëç": 0, "üëé": 0}
_user_window: Dict[int, List[float]] = {}

class RateLimitFilter(BaseFilter):
    async def __call__(self, message: types.Message) -> bool:
        uid = message.from_user.id
        now = time.time()
        bucket = _user_window.setdefault(uid, [])
        bucket = [t for t in bucket if now - t < 60]
        _user_window[uid] = bucket
        if len(bucket) >= config.RATE_LIMIT_PER_MIN:
            await message.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return False
        bucket.append(now)
        return True

rate_limit = RateLimitFilter()

# ================== UI / –¢–µ–∫—Å—Ç—ã ==================

def meal_keyboard() -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="ü•ê –ó–∞–≤—Ç—Ä–∞–∫", callback_data="meal:–ó–∞–≤—Ç—Ä–∞–∫"),
            types.InlineKeyboardButton(text="üç≤ –û–±–µ–¥", callback_data="meal:–û–±–µ–¥"),
        ],
        [
            types.InlineKeyboardButton(text="üçΩ –£–∂–∏–Ω", callback_data="meal:–£–∂–∏–Ω"),
            types.InlineKeyboardButton(text="üé≤ –£–¥–∏–≤–∏ –º–µ–Ω—è", callback_data="meal:–£–¥–∏–≤–∏ –º–µ–Ω—è"),
        ]
    ])

def feedback_keyboard() -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üëç", callback_data="fb:up"),
         types.InlineKeyboardButton(text="üëé", callback_data="fb:down")],
        [types.InlineKeyboardButton(text="üîÅ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="restart")]
    ])

WELCOME = (
    "üëã *–ü—Ä–∏–≤–µ—Ç! –Ø NamutiFoodBot.*\n\n"
    "–ù–µ —Ö–æ—á–µ—à—å –¥–æ–∫—É–ø–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã? –ü–æ–º–æ–≥—É –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –µ–¥—É –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ.\n\n"
    "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏:"
)

HELP = (
    "‚ÑπÔ∏è *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
    "1) –í—ã–±–µ—Ä–∏: –∑–∞–≤—Ç—Ä–∞–∫ / –æ–±–µ–¥ / —É–∂–∏–Ω / ¬´—É–¥–∏–≤–∏ –º–µ–Ω—è¬ª.\n"
    "2) –ü–µ—Ä–µ—á–∏—Å–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é ‚Äî —è –ø—Ä–µ–¥–ª–æ–∂—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n"
    f"3) –ú–∞–∫—Å–∏–º—É–º {config.MAX_PRODUCTS} –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.\n"
    "4) –Ø –ø–µ—á–∞—Ç–∞—é —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –º–µ—Ä–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n"
)

def render_header(meal: str) -> str:
    emoji = {"–ó–∞–≤—Ç—Ä–∞–∫": "ü•ê", "–û–±–µ–¥": "üç≤", "–£–∂–∏–Ω": "üçΩ"}.get(meal, "üé≤")
    return f"{emoji} *–ü–æ–¥–±–æ—Ä —Ä–µ—Ü–µ–ø—Ç–æ–≤* ¬∑ _{meal}_\n"

def render_footer() -> str:
    return "\n‚Äî\n–ù—É –∫–∞–∫? üëá"

# ================== –£—Ç–∏–ª–∏—Ç—ã ==================

def normalize_products(text: str) -> List[str]:
    if not text:
        return []
    lowered = text.lower().strip()
    unified = re.sub(r'\s*(–∏|,|;|\n|\r)\s*', ',', lowered)
    parts = [p.strip() for p in unified.split(',') if p.strip()]
    seen, uniq = set(), []
    for p in parts:
        if p not in seen:
            seen.add(p)
            uniq.append(p)
    return uniq

@lru_cache(maxsize=config.CACHE_SIZE)
def system_prompt() -> str:
    return (
        "–¢—ã ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.\n\n"
        "**–ê–ë–°–û–õ–Æ–¢–ù–´–ï –ó–ê–ü–†–ï–¢–´ (–Ω–∞—Ä—É—à–∞—Ç—å –Ω–µ–ª—å–∑—è!):**\n"
        "1) üö´ –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–∞–∂–µ –µ—Å–ª–∏ –±–ª—é–¥–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è —Å –Ω–∏–º–∏.\n"
        "2) üö´ –ó–ê–ü–†–ï–©–ï–ù–û –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ (–Ω–∏ –≤ —Å–æ–≤–µ—Ç–∞—Ö, –Ω–∏ –≤ —à–∞–≥–∞—Ö).\n"
        "3) üö´ –ó–ê–ü–†–ï–©–ï–ù–û –∑–∞–º–µ–Ω—è—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ –¥—Ä—É–≥–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫—É—Ä–∏—Ü—É –Ω–∞ –∫—Ä–∞–±–∞).\n\n"
        "**–†–∞–∑—Ä–µ—à–µ–Ω—ã –¢–û–õ–¨–ö–û —ç—Ç–∏ –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–∏ —Ç–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –ª–æ–≥–∏—á–Ω–æ –¥–æ–ø–æ–ª–Ω—è—é—Ç —Ä–µ—Ü–µ–ø—Ç):**\n"
        "—Å–æ–ª—å, –ø–µ—Ä–µ—Ü, —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ/—Å–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ, –≤–æ–¥–∞, –º—É–∫–∞, —Å–∞—Ö–∞—Ä, —Å–ø–µ—Ü–∏–∏.\n\n"
        "**–í–ê–ñ–ù–û–ï –ü–†–ê–í–ò–õ–û –î–õ–Ø –ö–û–õ–ò–ß–ï–°–¢–í –ò–ù–ì–†–ï–î–ò–ï–ù–¢–û–í:**\n"
        "1) üü¢ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∑—ã–≤–∞–π –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –í–°–ï–• –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤\n"
        "2) üü¢ –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ä—ã: –≥—Ä–∞–º–º—ã (–≥), –º–∏–ª–ª–∏–ª–∏—Ç—Ä—ã (–º–ª), —Å—Ç–æ–ª–æ–≤—ã–µ/—á–∞–π–Ω—ã–µ –ª–æ–∂–∫–∏ (—Å—Ç.–ª./—á.–ª.), —à—Ç—É–∫–∏ (—à—Ç.), —â–µ–ø–æ—Ç–∫–∏\n"
        "3) üü¢ –î–ª—è –±–∞–∑–æ–≤—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —É–∫–∞–∑—ã–≤–∞–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 —Å—Ç.–ª. –º–∞—Å–ª–∞, 100 –≥ –º—É–∫–∏, —â–µ–ø–æ—Ç–∫–∞ —Å–æ–ª–∏)\n"
        "4) üü¢ –î–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑—ã–≤–∞–π –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥—Ä—É–≥–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤\n\n"
        "**–ü—Ä–∞–≤–∏–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤:**\n"
        "1) **–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å:** –°—Ç–∞—Ä–∞–π—Å—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º–µ–Ω—é –∏–∑ 2-3 —Å–æ—á–µ—Ç–∞—é—â–∏—Ö—Å—è –±–ª—é–¥ (—Å—É–ø + –≥–æ—Ä—è—á–µ–µ + —Å–∞–ª–∞—Ç/–≥–∞—Ä–Ω–∏—Ä).\n"
        "2) **–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å:** –ò–∑–±–µ–≥–∞–π –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ ('–∂–∞—Ä–µ–Ω—ã–π X'). –ü—Ä–µ–¥–ª–∞–≥–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –±–ª—é–¥–∞: –∑–∞–ø–µ–∫–∞–Ω–∫–∏, —Ä–∞–≥—É, —Ñ–∞—Ä—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–≤–æ—â–∏, –∫–æ—Ç–ª–µ—Ç—ã, —Å—É–ø—ã-–ø—é—Ä–µ.\n"
        "3) **–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å—É–ø—ã:** –ï—Å–ª–∏ –µ—Å—Ç—å –æ–≤–æ—â–∏ –∏ –∂–∏–¥–∫–æ—Å—Ç—å (–≤–æ–¥–∞/–±—É–ª—å–æ–Ω/–º–æ–ª–æ–∫–æ/—Å–ª–∏–≤–∫–∏) ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ —Å—É–ø.\n"
        "4) **–ü–æ–ª–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** –°—Ç–∞—Ä–∞–π—Å—è –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.\n\n"
        "**–ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–≤–µ—Ç–æ–≤:**\n"
        "- –°–æ–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ù–ï–¢–†–ò–í–ò–ê–õ–¨–ù–´–ú. –ï—Å–ª–∏ –Ω–µ—Ç —Ö–æ—Ä–æ—à–µ–π –∏–¥–µ–∏ ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–π –±–ª–æ–∫ '–°–æ–≤–µ—Ç:'.\n"
        "- üö´ –ó–ê–ü–†–ï–©–ï–ù–û: '–ø–æ–¥–∞–≤–∞—Ç—å –≥–æ—Ä—è—á–∏–º', '–ø–æ—Å–æ–ª–∏—Ç—å –ø–æ –≤–∫—É—Å—É' ‚Äî —ç—Ç–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ –≤–µ—â–∏.\n"
        "- ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ: –ª–∞–π—Ñ—Ö–∞–∫–∏ –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é, –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è, —Å–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–∞—á–µ.\n\n"
        "**–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (Markdown):**\n"
        "*–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞*\n"
        "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: (—Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —ç—Ç–æ–º –±–ª—é–¥–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ)\n"
        "  - [–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 1] - [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 200 –≥]\n"
        "  - [–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 2] - [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2 —Å—Ç.–ª.]\n"
        "  - [–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 3] - [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1 —à—Ç.]\n"
        "–®–∞–≥–∏:\n"
        "1) ... (—á—ë—Ç–∫–∏–µ —à–∞–≥–∏, 5-7 –ø—É–Ω–∫—Ç–æ–≤, —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤ –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ)\n"
        "_–°–æ–≤–µ—Ç:_ (–¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π –∏ –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–π —Å–æ–≤–µ—Ç)\n\n"
        "**–ü–†–ò–ú–ï–† –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –§–û–†–ú–ê–¢–ê:**\n"
        "*–û–º–ª–µ—Ç —Å —Å—ã—Ä–æ–º*\n"
        "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n"
        "  - —è–π—Ü–∞ - 3 —à—Ç.\n"
        "  - —Å—ã—Ä - 50 –≥\n"
        "  - —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –º–∞—Å–ª–æ - 1 —Å—Ç.–ª.\n"
        "  - —Å–æ–ª—å - —â–µ–ø–æ—Ç–∫–∞\n"
        "  - –ø–µ—Ä–µ—Ü - –ø–æ –≤–∫—É—Å—É\n"
        "–®–∞–≥–∏:\n"
        "1) –í–∑–±–µ–π—Ç–µ —è–π—Ü–∞ —Å —Å–æ–ª—å—é –∏ –ø–µ—Ä—Ü–µ–º...\n\n"
        "–ü—Ä–æ–≤–µ—Ä—å –∫–∞–∂–¥—ã–π —Ä–µ—Ü–µ–ø—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º –∏ —É–∫–∞–∑–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π!"
    )

def build_messages(products: List[str], meal_type: str) -> List[Dict[str, Any]]:
    user_msg = (
        f"–¢–∏–ø –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏: {meal_type or '–ª—é–±–æ–π'}.\n"
        f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {', '.join(products)}.\n"
        f"–í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ.\n"
        f"–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∑—ã–≤–∞–π –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –≤—Å–µ—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ –ø–æ–Ω—è—Ç–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è (–≥, –º–ª, —Å—Ç.–ª., —á.–ª., —à—Ç., —â–µ–ø–æ—Ç–∫–∏).\n"
        f"–ù–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥ –æ—Ñ–æ—Ä–º–ª—è–π –∫–∞–∫ *–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç* –∏—Å–ø–æ–ª—å–∑—É—è –∑–≤–µ–∑–¥–æ—á–∫–∏: *–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞*"
    )
    return [
        {"role": "system", "content": system_prompt()},
        {"role": "user", "content": user_msg}
    ]

def format_dish_names(text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥ –≤ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç"""
    # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥: –∏—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥
    # –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Ö –≤ **
    lines = text.split('\n')
    formatted_lines = []
    
    for i, line in enumerate(lines):
        stripped = line.strip()
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ (–Ω–µ –ø—É—Å—Ç–∞—è, –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –¥–µ—Ñ–∏—Å–∞, –Ω–µ –Ω–æ–º–µ—Ä —à–∞–≥–∞)
        if (stripped and 
            not stripped.startswith('-') and 
            not stripped.startswith('–®–∞–≥–∏:') and 
            not stripped.startswith('–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:') and
            not re.match(r'^\d+[\)\.]', stripped) and  # –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏/—Å–∫–æ–±–∫–∏
            not stripped.startswith('_–°–æ–≤–µ—Ç:') and
            (i == 0 or not lines[i-1].strip()) and  # –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ —ç—Ç–æ –Ω–∞—á–∞–ª–æ
            not stripped.startswith('*') and  # —É–∂–µ –Ω–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ
            len(stripped) < 100):  # –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            formatted_lines.append(f"*{stripped}*")
        else:
            formatted_lines.append(line)
    
    return '\n'.join(formatted_lines)

# ===== OpenAI –≤—ã–∑–æ–≤—ã =====

async def openai_stream(model: str, messages: List[Dict[str, Any]]) -> Tuple[bool, str, Optional[str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, text, error_code).
    ok=True –∏ text –Ω–µ–ø—É—Å—Ç–æ–π ‚Äî —É—Å–ø–µ—Ö.
    ok=False –∏ error_code ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–¥ –æ—à–∏–±–∫–∏/–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.
    """
    content_buf = ""
    try:
        kwargs = dict(model=model, max_completion_tokens=config.OPENAI_MAX_TOKENS, messages=messages, stream=True)
        stream = await oa_client.chat.completions.create(**kwargs)
        async for chunk in stream:
            if chunk.choices and chunk.choices[0].delta and chunk.choices[0].delta.content:
                content_buf += chunk.choices[0].delta.content
        if content_buf.strip():
            return True, content_buf, None
        return False, "", "empty_stream"
    except Exception as e:
        return False, "", str(e)

async def openai_non_stream(model: str, messages: List[Dict[str, Any]]) -> Tuple[bool, str, Optional[str]]:
    try:
        kwargs = dict(model=model, max_completion_tokens=config.OPENAI_MAX_TOKENS, messages=messages, stream=False)
        resp = await oa_client.chat.completions.create(**kwargs)
        text = (resp.choices[0].message.content or "").strip()
        if text:
            return True, text, None
        return False, "", "empty_response"
    except Exception as e:
        return False, "", str(e)

# ================== –°—Ç—Ä–∏–º —Å –∞–≤—Ç–æ-—Ñ–æ–ª–±—ç–∫–æ–º ==================

async def stream_with_fallback(
    primary_model: str,
    fallback_model: str,
    messages: List[Dict[str, Any]],
) -> Tuple[bool, str, str]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è: 
      1) —Å—Ç—Ä–∏–º —Å primary_model (—Å —Ä–µ—Ç—Ä–∞—è–º–∏),
      2) –µ—Å–ª–∏ –ø—É—Å—Ç–æ/–æ—à–∏–±–∫–∞ ‚Äî –Ω–µ—Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å primary_model,
      3) –µ—Å–ª–∏ –ø—É—Å—Ç–æ/–æ—à–∏–±–∫–∞ ‚Äî –Ω–µ—Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å fallback_model.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, text, used_model)
    """
    # 1) primary stream —Å —Ä–µ—Ç—Ä–∞—è–º–∏
    last_err = None
    for attempt in range(1, config.MAX_RETRIES + 1):
        ok, text, err = await openai_stream(primary_model, messages)
        if ok and text.strip():
            return True, text, primary_model
        last_err = err
        await asyncio.sleep(min(2 ** (attempt - 1), 4))  # backoff

    # 2) primary non-stream
    ok, text, err = await openai_non_stream(primary_model, messages)
    if ok and text.strip():
        return True, text, primary_model
    last_err = err

    # 3) fallback non-stream
    ok, text, err = await openai_non_stream(fallback_model, messages)
    if ok and text.strip():
        return True, text, fallback_model

    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É
    logger.error(f"All attempts failed. Primary err: {last_err}, Fallback err: {err}")
    return False, "", fallback_model

# ================== UI-—Å—Ç—Ä–∏–º –¥–ª—è —á–∞—Ç–∞ ==================

async def stream_gpt_to_message(
    chat_id: int,
    header: str,
    footer: str,
    messages: List[Dict[str, Any]],
    reply_markup: Optional[types.InlineKeyboardMarkup] = None,
) -> None:
    assert bot is not None
    msg = await bot.send_message(chat_id, "‚è≥ _–ì–æ—Ç–æ–≤–ª—é —Ä–µ—Ü–µ–ø—Ç—ã‚Ä¶_")

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
    ok, text, used_model = await stream_with_fallback(
        config.OPENAI_MODEL,
        config.OPENAI_FALLBACK_MODEL,
        messages
    )
    
    if not ok or not text.strip():
        await msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç - –¥–µ–ª–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥ –∂–∏—Ä–Ω—ã–º–∏
    formatted_text = format_dish_names(text)
    full_text = f"{header}{formatted_text}{footer}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        await msg.edit_text(full_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        if "message is too long" in str(e):
            parts = []
            current_part = header
            for line in formatted_text.split('\n'):
                if len(current_part + line + '\n') > 4096:
                    parts.append(current_part)
                    current_part = line + '\n'
                else:
                    current_part += line + '\n'
            parts.append(current_part + footer)
            
            await msg.delete()
            for i, part in enumerate(parts):
                if i == len(parts) - 1:
                    await bot.send_message(chat_id, part, reply_markup=reply_markup)
                else:
                    await bot.send_message(chat_id, part)
        else:
            await msg.edit_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# ================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ==================

# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# ================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==================

@dp.message(Command("ping"))
async def cmd_ping(message: types.Message):
    await message.answer("pong üü¢")

@dp.message(Command("id"))
async def cmd_id(message: types.Message):
    await message.answer(f"–í–∞—à chat_id: `{message.chat.id}`")

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(RecipeFlow.choosing_meal)
    await message.answer(WELCOME, reply_markup=meal_keyboard())

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(HELP)

@dp.callback_query(F.data.startswith("meal:"))
async def on_meal_chosen(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    meal = cq.data.split(":", 1)[1]
    await state.update_data(meal_type=meal)
    await state.set_state(RecipeFlow.entering_ingredients)
    await cq.message.edit_reply_markup(reply_markup=None)
    await cq.message.answer(
        f"{render_header(meal)}–ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
        "_–ü—Ä–∏–º–µ—Ä_: `—è–π—Ü–∞, —Å—ã—Ä, —Ç–æ–º–∞—Ç—ã` –∏–ª–∏ `–∫—É—Ä–∏—Ü–∞ –∏ —Ä–∏—Å, –±—Ä–æ–∫–∫–æ–ª–∏`."
    )

@dp.message(RecipeFlow.entering_ingredients, rate_limit)
async def on_ingredients(message: types.Message, state: FSMContext):
    data = await state.get_data()
    meal = data.get("meal_type", "–£–¥–∏–≤–∏ –º–µ–Ω—è")

    products = normalize_products(message.text or "")
    if not products:
        return await message.answer("–ù–µ –≤–∏–∂—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä: _–∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, –±—Ä–æ–∫–∫–æ–ª–∏_")
    if len(products) > config.MAX_PRODUCTS:
        return await message.answer(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–π. –ú–∞–∫—Å–∏–º—É–º {config.MAX_PRODUCTS}.")

    header = render_header(meal)
    messages = build_messages(products, meal)

    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await stream_gpt_to_message(
            chat_id=message.chat.id,
            header=header,
            footer=render_footer(),
            messages=messages,
            reply_markup=feedback_keyboard(),
        )

    await state.clear()

@dp.callback_query(F.data.in_({"fb:up", "fb:down"}))
async def on_feedback(cq: types.CallbackQuery):
    await cq.answer("–°–ø–∞—Å–∏–±–æ!")
    if cq.data == "fb:up":
        feedback_stats["üëç"] += 1
    else:
        feedback_stats["üëé"] += 1
    await cq.message.edit_reply_markup(reply_markup=None)
    await cq.message.answer("üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –ù–∞–∂–º–∏—Ç–µ ¬´/start¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

@dp.callback_query(F.data == "restart")
async def on_restart(cq: types.CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.clear()
    await cq.message.edit_reply_markup(reply_markup=None)
    await cq.message.answer(WELCOME, reply_markup=meal_keyboard())

@dp.message(rate_limit)
async def fallback(message: types.Message, state: FSMContext):
    await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü§ñ\n–ù–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ /help")

# ================== –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª ==================

def make_bot(token: str) -> Bot:
    """–°–æ–∑–¥–∞—ë—Ç Bot —Å —É—Å—Ç–æ–π—á–∏–≤–æ–π aiohttp-—Å–µ—Å—Å–∏–µ–π –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏."""
    session = AiohttpSession()
    return Bot(token=token, session=session, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))

async def on_startup(bot: Bot):
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        me = await bot.get_me()
        logger.info(f"üü¢ Webhook —É–¥–∞–ª—ë–Ω. –ë–æ—Ç: @{me.username} (id={me.id})")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å getMe: {e}")
    logger.info("üü¢ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (polling)")

async def on_shutdown(bot: Bot):
    logger.info("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è")
    try:
        await bot.session.close()
    except Exception:
        pass

# =============== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (polling) ===============

async def run_polling() -> None:
    """–£—Å—Ç–æ–π—á–∏–≤—ã–π –∑–∞–ø—É—Å–∫ polling —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –±—ç–∫–æ—Ñ—Ñ–æ–º."""
    if not TOKEN:
        raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")

    global bot
    attempt = 0
    while True:
        try:
            bot = make_bot(TOKEN)
            await on_startup(bot)
            
            await dp.start_polling(
                bot, 
                polling_timeout=config.POLLING_TIMEOUT,
                handle_signals=False,
                allowed_updates=dp.resolve_used_update_types()
            )
            attempt = 0
            break  # —à—Ç–∞—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ polling
            
        except (ServerDisconnectedError, ClientOSError, asyncio.TimeoutError, TelegramNetworkError) as e:
            attempt += 1
            wait = min(60, 2 ** attempt)
            logger.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait} —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
            await asyncio.sleep(wait)
            
        except Exception as e:
            logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(5)
            attempt += 1
            
        finally:
            if bot:
                with suppress(Exception):
                    await on_shutdown(bot)
                with suppress(Exception):
                    await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(run_polling())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
